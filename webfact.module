<?php

//require DRUPAL_ROOT . '/vendor/autoload.php';

/**
 * Implementation of hook_init().
 */
function webfact_init() {
  drupal_add_css(drupal_get_path('module', 'webfact') . '/css/webfact.css',
    array('group' => CSS_DEFAULT, 'every_page' => TRUE));

  //require __DIR__ . '/vendor/autoload.php';
}


//function webfact_install(){
//}


function webfact_permission() {
  return array(
    'access websites' => array(
      'title' => t('Access websites'),
      'description' => t('Allow users to access website details'),
    ),
    'access templates' => array(
      'title' => t('Access templates'),
      'description' => t('Allow users to access website templates'),
    ),
    'manage containers' => array(
      'title' => t('Manage Containers'),
      'description' => t('Allow user full access to docker containers'),
    ),
  );
}

function webfact_menu() {
  $items['website/%/%'] = array(
    'page callback'    => 'webfact_arguments',
    'page arguments'   => array(0, 1, 2),
    'access arguments' => array('access websites'),
    'type' => MENU_CALLBACK, // no menu
  );

  // admin form in Configuration > Development
  $items['admin/config/development/webfact'] = array(
    'title' => t('Webfactory'),
    'description' => t('Webfactory settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webfact_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );  

  // entityfieldquery tests
  $items['bob'] = array(   
    'page callback'    => 'webfact_bootstrap',
    'access arguments' => array('access websites'),
    'type' => MENU_CALLBACK, // no menu
  );
  $items['site/%/%'] = array(
    'page callback'    => 'webfact_bootstrap',
    'page arguments'   => array(0, 1, 2),
    'access arguments' => array('access websites'),
    'type' => MENU_CALLBACK, // no menu
  );
  // angular tests
  $items['webang'] = array(
    'title'            => 'Angular test',
    'page callback'    => 'webfact_angular',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK, // no menu
  );
  return $items;
}


// admin form
function webfact_admin_settings() {
  $form['webfact_fieldset_server'] = array(
    '#title' => t('Server container'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['webfact_fieldset_server']['webfact_fserver'] = array(
    '#title' => t('Domain prefix'),
    '#default_value' => variable_get('webfact_fserver', array('')),
    '#description' => t('e.g. webfact.example.ch'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_server']['webfact_dserver'] = array(
    '#title' => t('Docker API URL'),
    '#default_value' => variable_get('webfact_dserver', array('')),
    '#description' => t('e.g. unix:///var/run/docker.sock or http://dock.example.ch:2375'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_server']['webfact_loglines'] = array(
    '#title' => t('How many lines to tail on logs'),
    '#default_value' => variable_get('webfact_loglines', array('')),
    '#description' => t('e.g. 90'),
    '#type' => 'textfield',
    '#size' => 10,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_server']['webfact_server_sitesdir'] = array(
    '#title' => t('A folder for container mountpoints'),
    '#default_value' => variable_get('webfact_server_sitesdir', array('')),
    '#description' => t('Default is /opt/sites/. When new websites are added, a subfolder is created with the site name. e.g. /data in containers could be mapped to /opt/sites/WEBSITENAME. Note: ensure a trailing slashh.'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );


  $form['webfact_fieldset_cont'] = array(
    '#title' => t('New containers'),
    '#description' => t('Settings for new containers'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['webfact_fieldset_cont']['webfact_cont_image'] = array(
    '#title' => t('Default base image for creating containers (can be overridden in templates and websites)'),
    '#default_value' => variable_get('webfact_cont_image', array('')),
    '#description' => t('e.g. boran/drupal'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );  
  $form['webfact_fieldset_cont']['webfact_restartpolicy'] = array(
    '#title' => t('New containers should start automatically when the docker server is rebooted?'),
    '#default_value' => variable_get('webfact_restartpolicy', array('on-failure')),
    '#description' => t('The site default behaviour to apply when the container exits, or docker is booted. Either "always" or "on-failure" to restart only when the container exit code is non-zero. This can also be specified per container.'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 30,
  );
  $form['webfact_fieldset_cont']['webfact_env_server'] = array(
    '#title' => t('An environment variable to pass to all containers'),
    '#default_value' => variable_get('webfact_env_server', array('')),
    '#description' => t('To identify where containers were created. e.g. WEBFACT_SERVER=foo.example.ch'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_cont']['webfact_data_volume'] = array(
    '#title' => t('Create a volume /data mapped to /opt/sites/WEBSITE on the docker server'),
    '#default_value' => variable_get('webfact_data_volume', 1),
    '#description' => t('Automatically add a standard volume for sharing backups or other infos from container to server. /opt/sites/WEBSITE will be created if necessary. Note: /opt/sites (exact path is specifed in the server section above) must be mounted as a volume between _this_ webfact container and the docker server.'),
    '#type' => 'checkbox',
    '#return_value' => 1,
  );


  $form['webfact_fieldset_rproxy'] = array(
    '#title' => t('Reverse proxy'),
    '#description' => t('Settings for the proxy container responsbile for virtual name mapping.'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['webfact_fieldset_rproxy']['webfact_rproxy'] = array(
    '#title' => t('Reverse proxy container ID'),
    '#default_value' => variable_get('webfact_rproxy', array('nginx')),
    '#description' => t('default nginx'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_rproxy']['webfact_rproxy_conf'] = array(
    '#title' => t('Reverse proxy config file'),
    '#default_value' => variable_get('webfact_rproxy_conf', ''),
    '#description' => t('default /etc/nginx/conf.d/default.conf'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_rproxy']['webfact_rproxygen'] = array(
    '#title' => t('Reverse proxy generator container ID'),
    '#default_value' => variable_get('webfact_rproxygen', array('nginx-gen')),
    '#description' => t('default nginx-gen'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_rproxy']['webfact_rproxy_loglines'] = array(
    '#title' => t('How many lines to tail on nginx logs'),
    '#default_value' => variable_get('webfact_rproxy_loglines', array('')),
    '#description' => t('default 1000'),
    '#type' => 'textfield',
    '#size' => 10,
    '#maxlength' => 100,
  );


  // webfact_manage_db_host webfact_manage_db_user webfact_manage_db_pw
  $form['webfact_fieldset_db'] = array(
    '#title' => t('Database management'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['webfact_fieldset_db']['webfact_manage_db'] = array(
    '#title' => t('Manage an external DB for all containers'),
    '#default_value' => variable_get('webfact_manage_db', 0),
    '#description' => t('Create a new DB for each new container in a dedicated DB instance. If not set, assume that DBs are created within containers themselves.'),
    '#type' => 'checkbox',
    '#return_value' => 1,
  );
  $form['webfact_fieldset_db']['webfact_manage_db_host'] = array(
    '#title' => t('Hostname or IP of the DB server'),
    '#default_value' => variable_get('webfact_manage_db_host', array('')),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_db']['webfact_manage_db_user'] = array(
    '#title' => t('Sql username'),
    '#default_value' => variable_get('webfact_manage_db_user', array('')),
    '#description' => t('This user must have the right to create DBs'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );
  $form['webfact_fieldset_db']['webfact_manage_db_pw'] = array(
    '#title' => t('Sql password'),
    '#default_value' => variable_get('webfact_manage_db_pw', array('')),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 100,
  );





  $form['webfact_fieldset_UI'] = array(
    '#title' => t('User interface and debugging'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['webfact_fieldset_UI']['webfact_msglevel1'] = array(
    '#title' => t('Level 1 messages to user: standard'),
    '#default_value' => variable_get('webfact_msglevel1', true),
    '#description' => t('Should always be enabled'),
    '#type' => 'checkbox',
    '#return_value' => 1,
  );
  $form['webfact_fieldset_UI']['webfact_msglevel2'] = array(
    '#title' => t('Level 2 messages to user: verbose'),
    '#default_value' => variable_get('webfact_msglevel2', true),
    '#type' => 'checkbox',
    '#return_value' => 1,
  );
  $form['webfact_fieldset_UI']['webfact_msglevel3'] = array(
    '#title' => t('Level 3 messages to user: debugging'),
    '#default_value' => variable_get('webfact_msglevel3', true),
    '#type' => 'checkbox',
    '#return_value' => 1,
  );
  $form['webfact_fieldset_UI']['webfact_rebuild_backups'] = array(
    '#title' => t('Create automatic backups when rebuilding. Disable this on dev/test servers to save time and diskpace'),
    '#default_value' => variable_get('webfact_rebuild_backups', true),
    '#type' => 'checkbox',
    '#return_value' => 1,
  );


  return system_settings_form($form);
}


function webfact_theme() {
  return array(
    'bootstrap' => array(
      'template' => 'bootstrap',
    ),
    'webfacts' => array(
      'template' => 'webfacts',
    ),
  );
}
function webfact_angular() {
  //$info = libraries_load('angularjs');
  //dpm($info);
  //drupal_add_library('angularjs', 'angularjs');
  $path = drupal_get_path('module', 'webfact');
  drupal_add_js($path . '/js/angular.min.js');
  drupal_add_js($path . '/js/app.js');
  return theme('webfacts');
}

/* (deprecated) example to build a list of nodes with EntityFieldQuery() 
 * and show in bootstrap. see bootstrap.tpl.php and 
 */
function webfact_bootstrap($path='x', $action='y', $id=0) {
  //dpm('webfact_bootstrap');
  //drupal_set_message($action);
  if (!is_numeric($id)) {      // only numbers: security
    #drupal_access_denied();
    return array('#markup' => '<p>' . t('Error: arguments not valid') . ",
      path=$path, 1=$action, 2=$id" . '</p>');
  }

  return theme('bootstrap');
}


/* 
 * hook for the /website/%/% page 
 */
function webfact_arguments($path, $action, $id) {
  //drupal_set_message($action);
  if (!is_numeric($id)) {      // only numbers: security
    #drupal_access_denied();
    return array('#markup' => '<p>' . t('Error: arguments not valid') . ", 
      path=$path, 1=$action, 2=$id" . '</p>');
  }

  $w= new WebfactController;
  //return $w->helloWorldPage();
  return $w->arguments($action, $id);   // send back render array
}



/*
 * hook_node_delete()
 * After deleting website meta data, delete the container too
 * TODO: 
 * a) what about backup images?
 * b) Only delete if category<>production, but the node will still be gone?
 * ideally there needs to be a pre and post delete hook.
 * Note: disabled in favour of using the batchAPI, e.g. see 'deleteall' in controller.php.
 */
/*
function webfact_node_delete($node) {
  if ($node->type == 'website') {
    //dpm($node);
    $w = new WebfactController;
    $w->deleteContainer($node->title); 
    drupal_set_message("Note: backup images of $node->title have NOT been deleted (should be removed automatically later)");
    // todo: if there is a destination back to /something/nid, delete it
    //if (isset($_GET['destination'])) {  // go back where we were
    //  $from = drupal_parse_url($_GET['destination']);
    //}
  }
}*/



/*
 * catch website or template edits
 */
function webfact_form_alter (&$form, &$form_state, $form_id) {
  if (  ($form_id == 'website_node_form') 
    || ($form_id == 'template_node_form') ) {
    $form['#validate'][] = 'webfact_form_validate';
    #dpm($form['#validate']);
  }
}
/*
 * validate fields: correct values
 * todo: how to active this code only for new nodes?
 */
function webfact_form_validate($form, &$form_state) {
  #dpm($form_state);

  // hostname: force lowercase, strip everything except a-z/0-9
  if (isset($form_state['values']['field_hostname']['und'][0]['value'])) {
    $form_state['values']['field_hostname']['und'][0]['value'] 
      #= preg_replace('/\s+/', '', 
      = preg_replace('/[^A-Za-z0-9-]/', '', 
         strtolower($form_state['values']['field_hostname']['und'][0]['value']));
    // Could also warn user:
    // then set form_set_error('title', t('Invalid hostname.'));
  }
  #dpm($form_state['values']['field_hostname']);

  // strip double quotes (which break nginx-gen) and trim
  if (isset($form_state['values']['field_docker_environment']['und'])) {
    #dpm($form_state['values']['field_docker_environment']['und']);
    foreach ($form_state['values']['field_docker_environment']['und'] as &$envline) {
      if (isset($envline['value']) && (strlen($envline['value'])>0) ) {
        $envline['value'] = trim($envline['value']);   // leading/trailing space
        #dpm('old:' . $envline['value']);
        $envline['value'] = preg_replace('/[\"]/', '', $envline['value']);
        #dpm('new:' . $envline['value'] );
      }
    }
  }

  // remove leading/trailing space from fields with arrays
  if (isset($form_state['values']['field_docker_volumes']['und'])) {
    foreach ($form_state['values']['field_docker_volumes']['und'] as &$envline) {
      if (isset($envline['value']) && (strlen($envline['value'])>0) ) {
        $envline['value'] = trim($envline['value']);  
      }
    }
  }
  if (isset($form_state['values']['field_docker_ports']['und'])) {
    foreach ($form_state['values']['field_docker_ports']['und'] as &$envline) {
      if (isset($envline['value']) && (strlen($envline['value'])>0) ) {
        $envline['value'] = trim($envline['value']);
      }
    }
  }
  // fields with just one value:
  $fields=array('field_hostname', 'field_docker_image', 'field_site_email', 'field_hostname');
  foreach ($fields as $field) {
    if (isset($form_state['values'][$field]['und'][0]['value'])) {
      $form_state['values'][$field]['und'][0]['value'] =
        trim($form_state['values'][$field]['und'][0]['value']);
      #dpm('trimmed ' . $field);
    }
  }

}


/*
 * hook_node_insert()
 * when new websites are added, ensure a mountpoint 
 * such as /opt/sites/SITE exist (for /data), 
 * if the setting webfact_data_volume is enabled.
 * Now /opt/sites must be mounted from the docker server itself,
 * since this gui is running in a container too.
 * todo: Developed for a specific use-case, make more generic?
 */
function webfact_node_insert($node) {
  if ($node->type == 'website') {
    if (variable_get('webfact_data_volume', 1) !== 1 ) {
      return;
    }
    $sitesdir = variable_get('webfact_server_sitesdir', '/opt/sites/');
    #dpm($node);
    if (! file_exists($sitesdir)) {
      drupal_set_message("No server folder $sitesdir exists (or is not accessible) for container mounts");
      return;
    } else if (! is_writable($sitesdir)) {
      drupal_set_message("Server folder (for container mounts) $sitesdir cannot be written to.");
      return;
    }
    $sitename = $node->field_hostname['und'][0]['value'];
    #dpm($sitename);
    if (! mkdir($sitesdir . '/' . $sitename, 0775) ) {
      drupal_set_message("Server folder $sitesdir/$sitename could not be created.");
    }
  }
}

